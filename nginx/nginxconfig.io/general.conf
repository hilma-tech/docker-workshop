# favicon.ico
# This block specifically handles requests for the favicon.ico file, which is the small icon displayed in browser tabs.
location = /favicon.ico {
    include                 nginxconfig.io/security.conf;
    # Adds a Cache-Control header to the response, allowing the file to be cached by browsers and proxies for 1 day
    add_header Cache-Control "public, max-age=86400, s-maxage=86400";
    # Tries to serve the requested file (favicon.ico). If the file doesn't exist, it returns a 404 Not Found error.
    try_files $uri =404;
    # Disables logging of 404 errors for this file to reduce unnecessary log entries.
    log_not_found off;
}

# . files
# designed to block access to hidden files and directories (those starting with a dot ., like .git or .env) while allowing access to a specific directory, which in this case is .well-known.
# note: The .well-known directory is a special directory used by some web services and protocols (like Let's Encrypt for SSL certificates or ACME challenges) to perform tasks that require publicly accessible files
location ~ /\.(?!well-known) {
    deny all;
}

# robots.txt
# tells search engine crawlers which URLs the crawler can access on your site
#  It tells web crawlers which pages or directories they are allowed or not allowed to access.
location = /robots.txt {
    include                 nginxconfig.io/security.conf;
    # Adds a Cache-Control header to allow caching for 1 day.
    add_header Cache-Control "public, max-age=86400, s-maxage=86400";
    # Attempts to serve the robots.txt file. If it doesn't exist, a 404 error is returned.
    try_files $uri =404;
    # Disables logging of 404 errors for this file.
    log_not_found off;
}

# assets, media
# regular expression to match requests for various static assets and media files, including:css,gif,png..
location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
    include                 nginxconfig.io/security.conf;
    # Adds a Cache-Control header to allow caching for 1 day.
    add_header Cache-Control "public, max-age=86400, s-maxage=86400";
    #  Attempts to serve the requested file. If it doesn't exist, a 404 error is returned.
    try_files $uri =404;
    # Sets an Expires header to allow browsers to cache these files for 7 days.
    expires 7d;
}

# svg, fonts
# This block uses a regular expression to match requests for SVG files and web fonts, including: svg,ttf,ttc..
location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
    include                 nginxconfig.io/security.conf;
    #  Adds a CORS header to allow these files to be loaded from any domain. This is useful for serving fonts or SVGs to external sites.
    add_header Access-Control-Allow-Origin "*";
    # Sets an Expires header to allow browsers to cache these files for 7 days.
    expires    7d;
    #  Attempts to serve the requested file. If it doesn't exist, a 404 error is returned.
    try_files $uri =404;
    # Adds a Cache-Control header to allow caching for 1 day.
    add_header Cache-Control "public, max-age=86400, s-maxage=86400";
}

# gzip
#Gzip is a file compression method used to reduce the size of data transferred between a web server and a client 
gzip            on;
# Adds a Vary: Accept-Encoding header to responses, which helps proxies and browsers handle cached compressed content correctly.
gzip_vary       on;
#  Enables gzip compression for responses to proxied requests, regardless of the request headers.
gzip_proxied    any;
# Sets the compression level to 6 (a balance between compression ratio and CPU usage). 
# between 1-9 when 1 is fastest compression but least effective in reducing file size and 9 is the best.
gzip_comp_level 6;
# Specifies the MIME types of files that should be compressed. These include
gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;