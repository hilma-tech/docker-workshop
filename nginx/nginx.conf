# Global configurations:
# Sets file location for the process ID
pid                  /run/nginx.pid;
# Sets the number of process workers to be optimal by available CPU
worker_processes     auto;
# Sets max number of file descriptors that each worker process can open.
# note: A file descriptor is a connection to a file that the nginx wants to access.
# Each worker connection open 2 file descriptors: 1 for upstream (client to server), 1 for downstream (server to client)
worker_rlimit_nofile 1024;
# note: should be 2048 because of line above?
# Load modules for additional nginx functionality. Not necessary right now, cause the dir is empty.
include              /etc/nginx/modules-enabled/*.conf;
# The events block configures how Nginx handles connections.
events {
    # allows each worker process to accept multiple new connections at once, improving performance.
    multi_accept       on; 
    # sets the maximum number of simultaneous connections each worker process can handle.
    worker_connections 1024; 
}
# The http block contains settings for handling HTTP traffic (web traffic).
http {
    # ensures that Nginx serves content with the UTF-8 character encoding by default, which supports most languages and special characters.
    charset                utf-8; 
    # Enables the sendfile feature, which allows Nginx to efficiently serve static files (like images or HTML) directly from disk without copying them into memory first.
    sendfile               on; 
    # Optimizes how Nginx sends data over the network by waiting to send packets until they are full, reducing the number of small packets sent.
    tcp_nopush             on; 
    # Disables the Nagle algorithm, which buffers small packets and delays sending them until either. There is a conflict with this and the tcp_nopush, usually this wins.
    tcp_nodelay            on; 
    # improves security by hiding the Nginx version number and other server details from being exposed in HTTP headers and error pages.
    server_tokens          off; 
    # Disables logging of 404 errors (when a requested file or page is not found). This reduces log file clutter.
    log_not_found          off; 
    # These settings optimize how Nginx stores and looks up MIME types (file types like text/html or image/jpeg).
    types_hash_max_size    2048;
    types_hash_bucket_size 64;
    # Sets the maximum allowed size for client uploads
    client_max_body_size   16M; 
    # MIME
    # maximum allowed size for client uploads
    # Sets the :18
    include                mime.types; 

    # sets the default MIME type for files that donâ€™t match any in the mime.types file. application/octet-stream is a generic type for binary files
    default_type           application/octet-stream; 
    # Logging
    # disables logging of all access requests (e.g., requests for pages or files)
    access_log             off; 
    # sends error logs to /dev/null, effectively discarding them. This means no error logs will be saved
    error_log              /dev/null; 
    # Load configs
    #  includes global configuration snippets.
    include                /etc/nginx/conf.d/*.conf;
    # includes configuration files for specific websites or applications hosted by Nginx.
    include                /etc/nginx/sites-enabled/*; 
# The server block defines how Nginx handles requests for a specific website or application.
server {
    # tells Nginx to listen for incoming HTTP requests on port 80 (the default port for web traffic)
    listen 80; 
    # Change to your domain name if applicable
    server_name localhost; 
    include                 nginxconfig.io/security.conf;
    include                 nginxconfig.io/general.conf;
    index index.html;
    root /usr/share/nginx/html;
    # Default try_files for all locations
    location / {
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "public, max-age=86400, s-maxage=86400";
    }
    # Explicit no-cache for index.html
    location = /index.html {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        try_files $uri =404;
    }
    # API routes - no caching
    location /api {
        proxy_pass http://main-server-service;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
 # Optional: socket configuration
 #  Any incoming request with a URL starting with /socket.io will be handled by this block.
    # location /socket.io {
    #         proxy_pass http://main-server-service;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #     add_header Cache-Control "no-cache, no-store, must-revalidate";
    #     include                 nginxconfig.io/security.conf;
    # }
}
}




















