# to remove old containers- docker compose down -v
# to run this- docker compose --env-file ./server/.env.development up
services:
  client:
    build:
      context: . # Build the client image from the root context
      dockerfile: client/Dockerfile # Use the Dockerfile located in the client directory

  db:
    image: mysql:latest # Use the latest official MySQL image
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD} # Set MySQL root password
      - MYSQL_DATABASE=${DB_NAME} # Auto-create this database on first run
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -h localhost -uroot -p$${MYSQL_ROOT_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  server:
    build:
      context: . # Build the server image from the root context
      dockerfile: server/Dockerfile # Use the Dockerfile located in the server directory
    environment:
      - DB_HOST=db # Set the DB host to the 'db' service (Docker's internal DNS)
      - DB_USER=${DB_USER} # Inject DB user from the .env file or shell environment
      - DB_PASSWORD=${DB_PASSWORD} # Inject DB password
      - DB_NAME=${DB_NAME} # Inject DB name
      - DB_PORT=${DB_PORT} # Inject DB port
      - DB_ENGINE=mysql # Specify the database engine used
    depends_on:
      db:
        condition: service_healthy # Wait for the db service to be healthy before starting
volumes:
  docker_workshop_mysql_data: # Named volume for persisting MySQL data
